Last-Update: 2014-12-22
Forwarded: no
Author: Dmitry Smirnov <onlyjob@member.fsf.org>
Description: use system libraries instead of bundled ones; verbose build; preserve CXXFLAGS.

--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -1,17 +1,17 @@
 cmake_minimum_required(VERSION 2.6)
-PROJECT(cpp CXX)
+PROJECT(cpp CXX C)
 
-#SET (CMAKE_VERBOSE_MAKEFILE true)
+SET (CMAKE_VERBOSE_MAKEFILE true)
 
 add_definitions(-D_FILE_OFFSET_BITS=64)
 # Uncomment this to enable boost::asio debug output.
 #add_definitions(-DBOOST_ASIO_ENABLE_HANDLER_TRACKING)
 
 # Set variables and required libraries.
 ##########################################
 if (CMAKE_COMPILER_IS_GNUCXX)
-  set(CMAKE_CXX_FLAGS "-Wall -Wno-unused-function -Wno-sign-compare -pthread")
+  set(CMAKE_CXX_FLAGS "$ENV{CMAKE_CXX_FLAGS} -Wall -Wno-unused-function -Wno-sign-compare -pthread")
 endif(CMAKE_COMPILER_IS_GNUCXX)
 if (MSVC)
   # Windows uses Unicode internally, so we also use Unicode instead of the default multi-byte character set.
   add_definitions(-DUNICODE -D_UNICODE)
@@ -29,15 +29,9 @@
   set (FREEBSD true)
 endif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
 
 # Set paths for required thirdparty libraries.
-set(CLIENT_GOOGLE_PROTOBUF_CPP "${CMAKE_SOURCE_DIR}/thirdparty/protobuf-2.5.0")
-if (WIN32)
-  set(CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY "${CLIENT_GOOGLE_PROTOBUF_CPP}/vsprojects/Release/libprotobuf.lib")
-else()
-  set(CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY "${CLIENT_GOOGLE_PROTOBUF_CPP}/src/.libs/libprotobuf.a")
-endif(WIN32)
-set(CLIENT_GOOGLE_TEST_CPP "${CMAKE_SOURCE_DIR}/thirdparty/gtest-1.5.0")
+set(CLIENT_GOOGLE_TEST_CPP "/usr/src/thirdparty/gtest")
 if (WIN32)
   set(CLIENT_GOOGLE_TEST_CPP_LIBRARY "${CLIENT_GOOGLE_TEST_CPP}/msvc/gtest-md/Debug/gtestd.lib")
 else()
   set(CLIENT_GOOGLE_TEST_CPP_LIBRARY "${CLIENT_GOOGLE_TEST_CPP}/lib/.libs/libgtest.a")
@@ -47,9 +41,8 @@
 else()
   set(CLIENT_GOOGLE_TEST_CPP_MAIN "${CLIENT_GOOGLE_TEST_CPP}/lib/.libs/libgtest_main.a")
 endif(WIN32)
 # Windows requires for a Debug build also debug libraries from protobuf & co.
-STRING(REPLACE "Release" "Debug" CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY_DEBUG ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY})
 STRING(REPLACE "Release" "Debug" TEMP ${CLIENT_GOOGLE_TEST_CPP_LIBRARY})
 STRING(REPLACE ".lib" "d.lib" CLIENT_GOOGLE_TEST_CPP_LIBRARY_DEBUG ${TEMP})
 STRING(REPLACE "Release" "Debug" TEMP ${CLIENT_GOOGLE_TEST_CPP_MAIN})
 STRING(REPLACE ".lib" "d.lib" CLIENT_GOOGLE_TEST_CPP_MAIN_DEBUG ${TEMP})
@@ -153,25 +146,28 @@
 include_directories(${OPENSSL_INCLUDE_DIR})
 # Comment this definition if the XtreemFS source should not depend on OpenSSL.
 add_definitions(-DHAS_OPENSSL)
 
-SET(REQUIRED_STATIC_LIBRARIES ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY})
-if(BUILD_CLIENT_TESTS)
-  SET(REQUIRED_STATIC_LIBRARIES ${REQUIRED_STATIC_LIBRARIES} ${CLIENT_GOOGLE_TEST_CPP_LIBRARY} ${CLIENT_GOOGLE_TEST_CPP_MAIN})
-endif(BUILD_CLIENT_TESTS)
-
-foreach (STATIC_LIB_FULL_PATH ${REQUIRED_STATIC_LIBRARIES})
-  if(NOT EXISTS ${STATIC_LIB_FULL_PATH})
-    message(FATAL_ERROR "The file ${STATIC_LIB_FULL_PATH} was not found. Please run 'make client' or 'make' from the base directory in order to build the required static libraries.")
-  endif()
-endforeach(STATIC_LIB_FULL_PATH)
+#SET(REQUIRED_STATIC_LIBRARIES ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY})
+#if(BUILD_CLIENT_TESTS)
+#  SET(REQUIRED_STATIC_LIBRARIES ${REQUIRED_STATIC_LIBRARIES} ${CLIENT_GOOGLE_TEST_CPP_LIBRARY} ${CLIENT_GOOGLE_TEST_CPP_MAIN})
+#endif(BUILD_CLIENT_TESTS)
+#
+#foreach (STATIC_LIB_FULL_PATH ${REQUIRED_STATIC_LIBRARIES})
+#  if(NOT EXISTS ${STATIC_LIB_FULL_PATH})
+#    message(FATAL_ERROR "The file ${STATIC_LIB_FULL_PATH} was not found. Please run 'make client' or 'make' from the base directory in order to build the required static libraries.")
+#  endif()
+#endforeach(STATIC_LIB_FULL_PATH)
+
+find_package(Protobuf REQUIRED)
 
 CMAKE_POLICY(SET CMP0003 OLD)
-ADD_LIBRARY(protobuf STATIC IMPORTED)
-ADD_LIBRARY(protobuf_debug STATIC IMPORTED)
-SET_PROPERTY(TARGET protobuf PROPERTY IMPORTED_LOCATION ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY})
-SET_PROPERTY(TARGET protobuf_debug PROPERTY IMPORTED_LOCATION ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY_DEBUG})
-include_directories(${CLIENT_GOOGLE_PROTOBUF_CPP}/src)
+ADD_LIBRARY(protobuf SHARED IMPORTED)
+ADD_LIBRARY(protobuf_debug SHARED IMPORTED)
+#SET_PROPERTY(TARGET protobuf PROPERTY IMPORTED_LOCATION ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY})
+#SET_PROPERTY(TARGET protobuf_debug PROPERTY IMPORTED_LOCATION ${CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY_DEBUG})
+#include_directories(${CLIENT_GOOGLE_PROTOBUF_CPP}/src)
+include_directories(${PROTOBUF_INCLUDE_DIRS})
 
 ADD_LIBRARY(gtest STATIC IMPORTED)
 ADD_LIBRARY(gtest_debug STATIC IMPORTED)
 ADD_LIBRARY(gtest_main STATIC IMPORTED)
@@ -224,9 +220,9 @@
 # WARNING: The resulting static libxtreemfs does NOT contain the required static library protobuf.
 #          If you want to use a static libxtreemfs, you have to use a CMake file like this which does automatically add the static libxtreemfs and libprotobuf to the executable.
 #          An alternative would be to change this file in such a way that the static libxtreemfs and libprotobuf are merged together into a static libxtreemfs.
 #          But this would require additional CMake macros as presented here: http://www.mail-archive.com/cmake@cmake.org/msg28670.html
-TARGET_LINK_LIBRARIES(xtreemfs optimized protobuf debug protobuf_debug ${Boost_LIBRARIES} ${LIBPTHREAD} ${OPENSSL_LIBRARIES} ${LIBSOCKET_SOLARIS} ${LIBNSL_SOLARIS})
+TARGET_LINK_LIBRARIES(xtreemfs ${PROTOBUF_LIBRARIES} debug ${PROTOBUF_LIBRARY_DEBUG} ${Boost_LIBRARIES} ${LIBPTHREAD} ${OPENSSL_LIBRARIES} ${LIBSOCKET_SOLARIS} ${LIBNSL_SOLARIS})
 
 ADD_EXECUTABLE(example_libxtreemfs src/example_libxtreemfs/example_libxtreemfs.cpp)
 TARGET_LINK_LIBRARIES(example_libxtreemfs xtreemfs)
 
@@ -242,31 +238,38 @@
 ADD_EXECUTABLE(lsfs.xtreemfs ${SRCS_LSFS})
 TARGET_LINK_LIBRARIES(lsfs.xtreemfs xtreemfs)
 
 file(GLOB_RECURSE SRCS_XTFS_UTIL src/xtfsutil/xtfsutil_server.cpp)
-file(GLOB_RECURSE SRCS_JSONCPP src/json/*.cpp)
+FIND_PATH(libjsoncpp_INCLUDE_DIR json/json.h
+/usr/include/jsoncpp
+)
+include_directories(${libjsoncpp_INCLUDE_DIR})
+MESSAGE("libjsoncpp_LIBRARIES=${libjsoncpp_LIBRARIES} libjsoncpp_INCLUDE_DIR=${libjsoncpp_INCLUDE_DIR}")
+set(libjsoncpp_LIBRARIES jsoncpp)
 
 if (NOT WIN32)
   if (FOUND${LIBFUSE})
     MESSAGE(STATUS "Configuring XtreemFS Fuse Adapter (mount.xtreemfs).")
     file(GLOB_RECURSE SRCS_FUSE_ADAPTER src/fuse/fuse*.cpp)
     file(GLOB_RECURSE SRCS_FUSE_ADAPTER_MAIN src/fuse/mount.xtreemfs.cpp)
-    ADD_EXECUTABLE(mount.xtreemfs ${SRCS_FUSE_ADAPTER} ${SRCS_FUSE_ADAPTER_MAIN} ${SRCS_XTFS_UTIL} ${SRCS_JSONCPP})
+    ADD_EXECUTABLE(mount.xtreemfs ${SRCS_FUSE_ADAPTER} ${SRCS_FUSE_ADAPTER_MAIN} ${SRCS_XTFS_UTIL})
     TARGET_LINK_LIBRARIES(mount.xtreemfs xtreemfs ${LIBFUSE})
+    TARGET_LINK_LIBRARIES(mount.xtreemfs ${libjsoncpp_LIBRARIES})
 
-    set(UNITTESTS_REQUIRED_SOURCES_fuse ${SRCS_FUSE_ADAPTER} ${SRCS_XTFS_UTIL} ${SRCS_JSONCPP})
+    set(UNITTESTS_REQUIRED_SOURCES_fuse ${SRCS_FUSE_ADAPTER} ${SRCS_XTFS_UTIL})
     set(UNITTESTS_REQUIRED_LIBRARIES_fuse ${LIBFUSE})
   endif(FOUND${LIBFUSE})
 
-  ADD_EXECUTABLE(xtfsutil src/xtfsutil/xtfsutil.cpp ${SRCS_JSONCPP})
+  ADD_EXECUTABLE(xtfsutil src/xtfsutil/xtfsutil.cpp)
   TARGET_LINK_LIBRARIES(xtfsutil ${Boost_LIBRARIES} ${LIBATTR})
+  TARGET_LINK_LIBRARIES(xtfsutil ${libjsoncpp_LIBRARIES})
 
   set(UNITTESTS_SKIP_cbfs true)
 endif(NOT WIN32)
 if(WIN32 AND CBFS_FOUND)
   MESSAGE(STATUS "Configuring XtreemFS CbFS Adapter (mount.xtreemfs.exe).")
   file(GLOB_RECURSE SRCS_CBFS_ADAPTER src/cbfs/*.cpp)
-  ADD_EXECUTABLE(mount.xtreemfs ${SRCS_CBFS_ADAPTER} ${SRCS_XTFS_UTIL} ${SRCS_JSONCPP})
+  ADD_EXECUTABLE(mount.xtreemfs ${SRCS_CBFS_ADAPTER} ${SRCS_XTFS_UTIL})
   TARGET_LINK_LIBRARIES(mount.xtreemfs xtreemfs ${CBFS_LIBRARIES})
 
   set(UNITTESTS_SKIP_fuse true)
 endif(WIN32 AND CBFS_FOUND)
--- a/Makefile
+++ b/Makefile
@@ -42,10 +42,9 @@
 PLUGIN_CONFIG_DIR=$(XTREEMFS_CONFIG_DIR)/server-repl-plugin
 
 #Configuration of cpp code thirdparty dependencies.
 # If you edit the next five variables, make sure you also change them in cpp/CMakeLists.txt.
-CLIENT_GOOGLE_PROTOBUF_CPP = cpp/thirdparty/protobuf-2.5.0
-CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY = $(CLIENT_GOOGLE_PROTOBUF_CPP)/src/.libs/libprotobuf.a
+CLIENT_GOOGLE_PROTOBUF_CPP = $(shell pkg-config --libs protobuf)
 CLIENT_GOOGLE_TEST_CPP = cpp/thirdparty/gtest-1.5.0
 CLIENT_GOOGLE_TEST_CPP_LIBRARY = $(CLIENT_GOOGLE_TEST_CPP)/lib/.libs/libgtest.a
 CLIENT_GOOGLE_TEST_CPP_MAIN = $(CLIENT_GOOGLE_TEST_CPP)/lib/.libs/libgtest_main.a
 # The two required objects libgtest.a and libgtest_main.a both depend
@@ -224,15 +223,8 @@
 endif
 
 client_thirdparty: $(CLIENT_THIRDPARTY_REQUIREMENTS)
 
-$(CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY): $(CLIENT_GOOGLE_PROTOBUF_CPP)/src/**
-	@echo "client_thirdparty: Configuring and building required Google protobuf library..."
-	@cd $(CLIENT_GOOGLE_PROTOBUF_CPP) && LIBS=-lpthread ./configure $(PROTOBUF_DISABLE_64_BIT_SOLARIS) >/dev/null
-	@$(MAKE) -C $(CLIENT_GOOGLE_PROTOBUF_CPP) >/dev/null
-	@echo "client_thirdparty: ...completed building required Google protobuf library."
-	@touch $(CLIENT_GOOGLE_PROTOBUF_CPP_LIBRARY)
-
 $(CLIENT_GOOGLE_TEST_CPP_LIBRARY): $(CLIENT_GOOGLE_TEST_CHECKFILE)
 	@touch $(CLIENT_GOOGLE_TEST_CPP_LIBRARY)
 
 $(CLIENT_GOOGLE_TEST_CPP_MAIN): $(CLIENT_GOOGLE_TEST_CHECKFILE)
@@ -246,16 +238,13 @@
 	@echo "client_thirdparty: ...completed building required Google googletest library."
 	@touch $(CLIENT_GOOGLE_TEST_CHECKFILE)
 
 client_thirdparty_clean:
-	@if [ -f $(CLIENT_GOOGLE_PROTOBUF_CPP)/Makefile ]; then echo "Cleaning required Google protobuf library sources..."; $(MAKE) -C $(CLIENT_GOOGLE_PROTOBUF_CPP) clean >/dev/null; fi
 	@if [ -f $(shell pwd)/$(CLIENT_GOOGLE_TEST_CPP)/Makefile ]; then echo "Cleaning required Google googletest library sources..."; $(MAKE) -C $(shell pwd)/$(CLIENT_GOOGLE_TEST_CPP) clean >/dev/null; fi
 	@if [ -f $(CLIENT_GOOGLE_TEST_CHECKFILE) ]; then rm $(CLIENT_GOOGLE_TEST_CHECKFILE); fi
 	@echo "...finished cleaning thirdparty sources."
 
 client_thirdparty_distclean:
-	@echo "client_thirdparty: Dist-Cleaning required Google protobuf library sources..."
-	@if [ -f $(shell pwd)/$(CLIENT_GOOGLE_PROTOBUF_CPP)/Makefile ]; then $(MAKE) -C $(shell pwd)/$(CLIENT_GOOGLE_PROTOBUF_CPP) distclean >/dev/null; fi
 	@echo "client_thirdparty: Dist-Cleaning required Google googletest library sources..."
 	@if [ -f $(shell pwd)/$(CLIENT_GOOGLE_TEST_CPP)/Makefile ]; then $(MAKE) -C $(shell pwd)/$(CLIENT_GOOGLE_TEST_CPP) distclean >/dev/null; fi
 	@if [ -f $(CLIENT_GOOGLE_TEST_CHECKFILE) ]; then rm $(CLIENT_GOOGLE_TEST_CHECKFILE); fi
 	@echo "client_thirdparty: ...finished distcleaning thirdparty sources."
--- a/interface/Makefile
+++ b/interface/Makefile
@@ -1,8 +1,8 @@
-PROTOC=/usr/local/bin/protoc
+PROTOC=/usr/bin/protoc
 BASE_DIR=$(shell pwd)
 INCLUDE_DIR=include/
-PROTOBUF_INCLUDE=/usr/local/include/
+PROTOBUF_INCLUDE=/usr/include/
 
 PBRPC_PLUGIN=../bin/protoc-gen-pbrpc
 PBRPCCPP_PLUGIN=../bin/protoc-gen-pbrpccpp
 
--- a/cpp/include/xtfsutil/xtfsutil_server.h
+++ b/cpp/include/xtfsutil/xtfsutil_server.h
@@ -14,9 +14,9 @@
 #include <boost/thread/mutex.hpp>
 #include <map>
 #include <string>
 
-#include "json/json-forwards.h"
+#include <json/forwards.h>
 #include "pbrpc/RPC.pb.h"
 
 #ifdef WIN32
 typedef unsigned int uid_t;
--- a/cpp/src/xtfsutil/xtfsutil.cpp
+++ b/cpp/src/xtfsutil/xtfsutil.cpp
@@ -23,9 +23,9 @@
 #include <fstream>
 #include <string>
 #include <vector>
 
-#include "json/json.h"
+#include <json/json.h>
 #include "libxtreemfs/version_management.h"
 #include "libxtreemfs/xtreemfs_exception.h"
 #include "xtreemfs/GlobalTypes.pb.h"
 
--- a/cpp/src/xtfsutil/xtfsutil_server.cpp
+++ b/cpp/src/xtfsutil/xtfsutil_server.cpp
@@ -17,9 +17,9 @@
 #ifndef WIN32
 #include <sys/fcntl.h>
 #endif  // !WIN32
 
-#include "json/json.h"
+#include <json/json.h>
 #include "libxtreemfs/client.h"
 #include "libxtreemfs/volume.h"
 #include "libxtreemfs/xtreemfs_exception.h"
 #include "util/error_log.h"
